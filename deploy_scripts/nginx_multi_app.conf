# =============================================================================
# Nginx Configuration for Multiple Django Applications
# Supports: weatherapp, irmss, fireguard and other Django applications
# Server IP: 192.168.3.5
# =============================================================================

# Main nginx configuration
user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=20r/s;
    
    # Upstream definitions for each app
    upstream weatherapp_backend {
        server 127.0.0.1:8001;
        keepalive 32;
    }
    
    upstream irmss_backend {
        server 127.0.0.1:8002;
        keepalive 32;
    }
    
    upstream fireguard_backend {
        server 127.0.0.1:8003;
        keepalive 32;
    }
    
    # Main server block
    server {
        listen 80;
        server_name 192.168.3.5 localhost;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
        
        # Root redirect to weatherapp
        location = / {
            return 301 /bccweatherapp/;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "All systems operational\n";
            add_header Content-Type text/plain;
        }
        
        # =============================================================================
        # WeatherAlert Application (bccweatherapp)
        # =============================================================================
        location /bccweatherapp/ {
            # Rate limiting
            limit_req zone=general burst=20 nodelay;
            
            # Proxy to WeatherAlert backend
            proxy_pass http://weatherapp_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
            
            # WebSocket support (if needed)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        # WeatherAlert static files
        location /bccweatherapp/static/ {
            alias /opt/django-apps/weatherapp/staticfiles/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Served-By "WeatherAlert";
        }
        
        # WeatherAlert media files
        location /bccweatherapp/media/ {
            alias /opt/django-apps/weatherapp/media/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Served-By "WeatherAlert";
        }
        
        # WeatherAlert health check
        location /bccweatherapp/health/ {
            access_log off;
            return 200 "WeatherAlert healthy\n";
            add_header Content-Type text/plain;
            add_header X-Served-By "WeatherAlert";
        }
        
        # =============================================================================
        # IRMSS Application (irrms)
        # =============================================================================
        location /irrms/ {
            # Rate limiting
            limit_req zone=general burst=20 nodelay;
            
            # Proxy to IRMSS backend
            proxy_pass http://irmss_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
        }
        
        # IRMSS static files
        location /irrms/static/ {
            alias /opt/django-apps/irmss/staticfiles/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Served-By "IRMSS";
        }
        
        # IRMSS media files
        location /irrms/media/ {
            alias /opt/django-apps/irmss/media/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Served-By "IRMSS";
        }
        
        # IRMSS health check
        location /irrms/health/ {
            access_log off;
            return 200 "IRMSS healthy\n";
            add_header Content-Type text/plain;
            add_header X-Served-By "IRMSS";
        }
        
        # =============================================================================
        # FireGuard Application (fireguard)
        # =============================================================================
        location /fireguard/ {
            # Rate limiting
            limit_req zone=general burst=20 nodelay;
            
            # Proxy to FireGuard backend
            proxy_pass http://fireguard_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
        }
        
        # FireGuard static files
        location /fireguard/static/ {
            alias /opt/django-apps/fireguard/staticfiles/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Served-By "FireGuard";
        }
        
        # FireGuard media files
        location /fireguard/media/ {
            alias /opt/django-apps/fireguard/media/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Served-By "FireGuard";
        }
        
        # FireGuard health check
        location /fireguard/health/ {
            access_log off;
            return 200 "FireGuard healthy\n";
            add_header Content-Type text/plain;
            add_header X-Served-By "FireGuard";
        }
        
        # =============================================================================
        # API Endpoints (if needed)
        # =============================================================================
        location /api/weatherapp/ {
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://weatherapp_backend/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /api/irmss/ {
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://irmss_backend/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /api/fireguard/ {
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://fireguard_backend/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # =============================================================================
        # Error pages
        # =============================================================================
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root /var/www/html;
            internal;
        }
        
        location = /50x.html {
            root /var/www/html;
            internal;
        }
        
        # =============================================================================
        # Security and performance
        # =============================================================================
        
        # Block access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Block access to backup files
        location ~ \.(bak|backup|old|orig|save|swp|tmp)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Optimize for static files
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
        }
    }
    
    # =============================================================================
    # SSL Configuration (when certificates are available)
    # =============================================================================
    # Uncomment and configure when SSL certificates are available
    
    # server {
    #     listen 443 ssl http2;
    #     server_name 192.168.3.5 localhost;
    #     
    #     ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
    #     ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;
    #     
    #     # SSL configuration
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    #     
    #     # Include the same location blocks as above
    #     # ... (copy all location blocks from the HTTP server block)
    # }
    # 
    # # Redirect HTTP to HTTPS
    # server {
    #     listen 80;
    #     server_name 192.168.3.5 localhost;
    #     return 301 https://$server_name$request_uri;
    # }
}
